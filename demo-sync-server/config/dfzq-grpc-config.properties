# 配置信息分为五类：
# 1. common config            (公共配置)
# 2. provider config   (服务提供者需要填写)
# 3. consumer config   (服务消费者需要填写)
# 4. kafka config    (提供者、消费者都需要配置)
# 5. zookeeper config         (提供者、消费者都需要配置)

# 配置文件的放置路径：class文件根目录
# （请参照：使用log4j记日志的项目中 log4j.properties 文件的路径）


# ------------ begin of common config ------------

# 必填,类型string,说明:当前应用名称
common.application=grpc-test-app

# 必填,类型string,说明:grpc版本号
common.grpc=1.2.4

#选填，默认是 grpc-test-app，说明：grpc项目名监控
common.project=grpc-java

# 选填，类型string,说明:服务注册根路径，默认值/Application/grpc
#common.root=/Application/grpc/c++

# 必填,类型string,说明:项目负责人,员工工号,多个工号之间使用英文逗号
common.owner=A9001,A9002,A9003

# 可选,类型string,说明:服务注册使用的IP地址
# 如果不配置该参数值，当前服务器的IP地址为"非127.0.0.1的第一个网卡的IP地址"
# 使用场合:一台服务器安装有多个网卡,如果需要指定不是第一个网卡的IP地址为服务注册的IP地址
#common.localhost.ip=192.168.2.123

# ------------ end of common config ------------




# ------------ begin of provider config ------------

# 必填,类型string,说明:服务的版本信息，一般表示服务接口的版本号
provider.version=2.0

# 必填,类型String,固定值provider,说明:provider表示服务提供端，consumer表示服务消费端
provider.side=provider

# ----------------------------------------

# 可选,类型string,说明:当前模块名称
# provider.module=

# 可选,类型string,说明:服务分组信息，一般用来区分一个服务接口的多种实现（provider）
# provider.group=

# 可选,类型int,缺省值1000,说明:远程服务调用超时时间（毫秒）
# provider.default.timeout=

# 可选,类型int,缺省值2,说明:远程服务调用重试次数，不包括第一次调用，不需要重试则设置为0
# provider.default.reties=

# 可选,类型int,缺省值0,说明:对每个provider最大连接次数，默认最大连接数
#provider.default.connections=1

# 可选,类型string,缺省值round_robin,说明:负载均衡策略，可选值：pick_first、round_robin，weight_round_robin,可扩展实现其他策略
# provider.default.loadbalance=

# 可选,类型Boolean,缺省值false,说明:是否缺省异步执行，如果true则可直接忽略返回值，不阻塞线程
# provider.default.async=
#Max request
#provider.default.requests=1
# dataflow control
#provider.default.connections=1

#route rule
#provider.access.protected=true


# 可选,类型sting/Boolean,缺省值false,说明:令牌验证，为空表示不开启，为true则随机生成动态令牌，否则使用镜头令牌
# provider.token=

# 可选,类型boolean,缺省值false,说明:服务是否过时，如果为true则应用该服务时日志error告警
# provider.deprecated=true

# 可选,类型boolean,缺省值ture,说明:服务是否动态注册，如果为false则注册后将显示为disable状态，
#     需要人工启用，且服务停止时需手动注销
# provider.dynamic=

# 可选,类型string/boolean,缺省值false,说明:设为true，将向logger中输出访问日志，也可填写访问
#     日志文件路径，直接把访问日志输出到指定文件
# provider.accesslog=

# 可选,类型string,说明:服务负责人，填写负责人公司邮箱前缀
# provider.owner=

# 可选,类型int,缺省值100,说明:服务provider权重，是服务provider的容量，在负载均衡基于权重的选择算法中用到
# provider.weight=

# 可选,类型string,缺省值failover,说明:集群方式，可选：failover/failfast/failback/forking
# provider.default.cluster=

# 可选,类型string,说明:应用版本号
# provider.application.version=

# 可选,类型string,说明:组织名（BU或部门）
# provider.organization=

# 可选,类型string,说明:应用环境，如：develop/test/product
# provider.environment=

# 可选,类型string,说明:模块的版本号
# provider.module.version=

# 可选,类型boolean,缺省值false,说明:表示是否为跨主机访问
# provider.anyhost=

# 可选,类型string,说明:dubbo版本号,缺省值为grpc的版本号
# provider.dubbo=

# 可选, 类型boolean, 缺省值false, 说明:服务是否处于访问保护状态
# 属性的可选值为false 、true ，分别表示不受保护、受保护，缺省值为false （不受保护）
#provider.access.protected=true

# ------------ end of provider config ------------




# ------------ begin of consumer config ------------

# 必填,类型boolean,缺省值true,说明:启动时检查提供者是否存在，true报错，false忽略
consumer.check=true

# 必填,类型int,固定值1000,说明:远程服务调用超时时间(毫秒)
consumer.default.timeout=1000

# 必填,类型String,默认值consumers,说明:所属范畴
consumer.category=consumers

# 必填,类型String,固定值consumer,说明:provider表示服务提供端，consumer表示服务消费端
consumer.side=consumer

# --------------------------
# 可选,类型string,说明:服务提供者的版本号
# 指定了服务提供者的版本号之后，程序会优先选择具有指定版本的服务；如果注册中心没有该版本的服务，则不限制版本重新选择服务提供者。
# 使用场景为：注册中心上同一个服务多版本共存，并且服务的高版本与低版本不兼容，而当前应用由于特殊原因只能调用低版本的服务
# 如果当前应用只调用一个服务，属性值直接配置版本号，例如1.0.0
# 如果当前应用需要调用多个服务，属性值按照冒号逗号的方式分隔，例如com.dfzq.examples.Greeter:1.0.0,com.dfzq.examples.Hello:1.2.1
# 如果当前应用需要调用多个服务，建议在服务治理平台维护该属性，只有一个版本的服务可以不维护
#consumer.service.version=helloworld.Greeter:1.0,com.dfzq.grpc.helloworld.Greeter:1.0.2

# 可选,类型string,说明:应用版本号
# consumer.application.version=

# 可选,类型String,说明:服务消费方远程调用过程拦截器名称，多个名称用逗号分隔
# consumer.default.reference.filter=

# 可选,类型String,缺省值slf4j,说明:日志输出方式，可选：slf4j,jcl,log4j,jdk
# consumer.logger=

# 可选,类型String,说明:调用服务负责人，用于服务治理，请填写负责人公司邮箱前缀
# consumer.owner=

# 可选,类型string,说明:组织名（BU或部门）
# consumer.organization=

# 可选,类型int,缺省值2,说明:远程服务调用重试次数
# consumer.default.retries=

# 可选,类型string,缺省值connection,说明：负载均衡模式
# 可选值为 connection 和 request,分别表示“连接负载均衡”、“请求负载均衡”
# “连接负载均衡”适用于大部分业务场景，服务端和客户端消耗的资源较小。
# “请求负载均衡”适用于服务端业务逻辑复杂、并有多台服务器提供相同服务的场景。
consumer.loadbalance.mode=request
#consumer.loadbalance.mode=connection


# 可选,类型string,缺省值round_robin,说明:调度策略，可选范围：pick_first、round_robin、weight_round_robin、consistent_hash
consumer.default.loadbalance=consistent_hash

#the weight of provider
provider.weight=1


# 可选,类型string,负载均衡策略选择是consistent_hash(一致性Hash)，配置进行hash运算的参数名称的列表
# 多个参数之间使用英文逗号分隔，例如 id,name
# 如果负载均衡策略选择是consistent_hash，但是该参数未配置参数值、或者参数值列表不正确，则随机取一个值来做散列运算

consumer.consistent.hash.arguments=name,no

# 可选,类型int,缺省值100,说明:每个服务对外最大连接数
# consumer.default.connections=

# 可选,类型string,缺省值failover,说明:集群方式，可选：failover/failfast/failback/forking
# consumer.default.cluster=

# 可选,类型integer,缺省值5,说明：连续多少次请求出错，自动切换到提供相同服务的新服务器
consumer.switchover.threshold=5

# 可选,类型为long,单位为秒,缺省值为60,说明：服务提供者不可用时的惩罚时间，即多次请求出错的服务提供者一段时间内不再去请求
# 属性值大于或等于0，等于0表示没有惩罚时间，如果客户端只剩下一个服务提供者，即使服务提供者不可用，也不做剔除操作。
consumer.unavailable.provider.punish.time=60
# ------------ end of consumer config ------------




# ------------ begin of kafka.producer config ------------

# 转发服务跟踪信息给kafka的服务提供者的IP地址和端口
# 服务跟踪信息先发送给KafkaSenderServer(一个基于原生grpc的服务)，然后由KafkaSenderServer转发给kafka
# 多个服务提供者之间使用英文逗号分隔，IP地址和端口使用英文冒号分隔
# kafka.sender.servers=192.168.0.1:50080,192.168.0.2:50080,192.168.0.3:50080
#kafka.sender.servers=127.0.0.1:50080
#kafka.sender.servers=127.0.0.1:9093
#kafka.sender.servers=160.6.78.133:50080

# 可选，采样频率，指的是每秒采集服务链的数据条数（这里的一条理解为traceId相同的多个json串）；
# 默认值为空，表示所有服务链都发送到kafka；
# 如果采样率的数值不为空，并且数值大于0，根据指定的采样率采集数据
# 配置值可以为正整数、小数(例如0.5)、分数(例如3/1024)
# kafka.sampling.frequency=

# 可选, 将服务跟踪信息发送给KafkaSenderServer的线程个数
# 配置值为正整数，默认值为1
# kafka.sender.number=1

# 可选, 服务跟踪信息消息队列的容量
# 配置值为正整数，默认值为50000
# message.queue.capacity=50000
# --------------------------

# 可选,每个RecordBatch可以缓存的最大字节数
# kafka.producer.batch.size=16384

# 可选,所有RecordBatch的总共最大字节数
# kafka.producer.buffer.memory=33554432

# 可选,每个RecordBatch的最长延迟发送时间
# kafka.producer.linger.ms=1

# 可选,每个RecordBatch的最长阻塞时间
# kafka.producer.max.block.ms=1

# 可选,消息发送失败重试的次数
# kafka.producer.retries=0

# 可选,失败补偿时间，每次失败重试的时间间隔，不可设置太短，避免第一条消息的响应还没返回，第二条消息又发出去了，造成逻辑错误
# kafka.producer.retry.backoff.ms

# 可选,同一时间，producer到broker的一个连接上允许的最大未确认请求数，默认为5
# kafka.producer.max.in.flight.requests.per.connection=5

# 可选，采样频率，指的是每秒向kafka写服务链的数据条数（这里的一条理解为traceId相同的多个json串）；
# 默认值为空，表示所有服务链都发送到kafka；
# 如果采样率的数值不为空，并且数值大于0，根据指定的采样率采集数据
# 配置值可以为正整数、小数(例如0.5)、分数(例如3/1024)
#kafka.sampling.frequency=0.5

# ------------ end of kafka.producer config ------------




# ------------ begin of zookeeper config ------------

# zookeeper主机列表
#zookeeper.host.server=192.168.207.4:2181,192.168.207.6:2181
zookeeper.host.server=192.168.2.103:2181
#zookeeper.host.server=160.6.78.133:2181

#重试次数
zookeeper.retryNum=5

#连接超时时间
zookeeper.connectiontimeout=5000


# 可选,类型string,访问控制用户名
zookeeper.acl.username=admin

# 可选,类型string,访问控制密码
# 这里的密码配置的是密文，使用com.orientsec.grpc.common.util.DesEncryptUtils#encrypt(String plaintext)进行加密
#zookeeper.acl.password=9b579c35ca6cc74230f1eed29064d10a
zookeeper.acl.password=9883c580ae8226f0dd8200620e4bc899



# ------------ end of zookeeper config ------------


writekafka.enabled=false
#kafka.sender.servers=127.0.0.1:50080,192.168.226.128:50080

kafka.sender.servers=127.0.0.1:50080
